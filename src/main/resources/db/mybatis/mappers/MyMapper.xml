<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MyMapper">
    <select id="selectBlog" resultMap="blog">
        select
        blog.id as blog_id,
        blog.title as blog_title,
        blog.description as blog_description,
        blog.content as blog_conent,
        blog.updated_at as blog_updated_at,
        blog.created_at as blog_created_at,
        user.id as user_id,
        user.username as user_username,
        user.avatar as user_avatar,
        user.updated_at as user_updated_at,
        user.created_at as user_created_at
        FROM blog
        LEFT OUTER JOIN user
        ON blog.user_id = user.id
        <if test="user_id !=null">
            where user_id=#{user_id}
        </if>
        limit ${offset},#{limit}
    </select>
    <select id="countBlog" resultType="int">
        select count(*) from blog
        <if test="user_id !=null">
            where user_id=#{user_id}
        </if>
    </select>
    <update id="iwanttoupdate" parameterType="com.example.demo.entity.Blog">
        UPDATE blog
        SET title       = #{title},
        content     = #{content},
        description = #{description},
        updated_at  = now()
        WHERE id = #{id}
    </update>
    <select id="updateBlog" resultMap="blog">
        select
        blog.id as blog_id,
        blog.title as blog_title,
        blog.description as blog_description,
        blog.content as blog_conent,
        blog.updated_at as blog_updated_at,
        blog.created_at as blog_created_at,
        user.id as user_id,
        user.username as user_username,
        user.avatar as user_avatar,
        user.updated_at as user_updated_at,
        user.created_at as user_created_at
        FROM blog
        LEFT OUTER JOIN user
        ON blog.user_id = user.id
        where
        blog.id=#{id}
    </select>
    <select id="selectBlogById" resultMap="blog">
        select
        blog.id as blog_id,
        blog.title as blog_title,
        blog.description as blog_description,
        blog.content as blog_conent,
        blog.updated_at as blog_updated_at,
        blog.created_at as blog_created_at,
        user.id as user_id,
        user.username as user_username,
        user.avatar as user_avatar,
        user.updated_at as user_updated_at,
        user.created_at as user_created_at
        FROM blog
        LEFT OUTER JOIN user
        ON blog.user_id = user.id
        where blog.user_id=#{id}
    </select>
    <delete id="deleteBlog" parameterType="com.example.demo.entity.Blog">
        delete  from blog where id=#{id}
    </delete>

    <insert id="insertBlog" parameterType="com.example.demo.entity.Blog" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO blog (user_id, title, description, content, created_at, updated_at)
        VALUES (#{userId}, #{title}, #{description}, #{content}, now(), now())
    </insert>
    <resultMap id="blog" type="com.example.demo.entity.Blog">
        <id property="id" column="blog_id"/>
        <result property="title" column="blog_title"/>
        <result property="description" column="blog_description"/>
        <result property="content" column="blog_content"/>
        <result property="updatedAt" column="blog_updated_at"/>
        <result property="createdAt" column="blog_created_at"/>
        <association property="user" javaType="com.example.demo.entity.User">
            <id property="id" column="user_id"/>
            <result property="username" column="user_username"/>
            <result property="avatar" column="user_avatar"/>
            <result property="updatedAt" column="user_updated_at"/>
            <result property="createdAt" column="user_created_at"/>
        </association>
    </resultMap>
</mapper>